//! `SeaORM` Entity. Generated by sea-orm-codegen 0.10.3

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "Packages")]
pub struct Model {
    #[sea_orm(column_name = "ID", primary_key)]
    pub id: u32,
    #[sea_orm(column_name = "PackageBaseID")]
    pub package_base_id: u32,
    #[sea_orm(column_name = "Name", unique)]
    pub name: String,
    #[sea_orm(column_name = "Version")]
    pub version: String,
    #[sea_orm(column_name = "Description")]
    pub description: Option<String>,
    #[sea_orm(column_name = "URL")]
    pub url: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::package_bases::Entity",
        from = "Column::PackageBaseId",
        to = "super::package_bases::Column::Id",
        on_update = "Restrict",
        on_delete = "Cascade"
    )]
    PackageBases,
    #[sea_orm(has_many = "super::package_depends::Entity")]
    PackageDepends,
    #[sea_orm(has_many = "super::package_relations::Entity")]
    PackageRelations,
    #[sea_orm(has_many = "super::package_sources::Entity")]
    PackageSources,
}

impl Related<super::package_bases::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PackageBases.def()
    }
}

impl Related<super::package_depends::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PackageDepends.def()
    }
}

impl Related<super::package_relations::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PackageRelations.def()
    }
}

impl Related<super::package_sources::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PackageSources.def()
    }
}

impl Related<super::licenses::Entity> for Entity {
    fn to() -> RelationDef {
        super::package_licenses::Relation::Licenses.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::package_licenses::Relation::Packages.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
