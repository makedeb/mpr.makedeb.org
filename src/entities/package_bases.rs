//! `SeaORM` Entity. Generated by sea-orm-codegen 0.10.3

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "PackageBases")]
pub struct Model {
    #[sea_orm(column_name = "ID", primary_key)]
    pub id: u32,
    #[sea_orm(column_name = "Name", unique)]
    pub name: String,
    #[sea_orm(column_name = "NumVotes")]
    pub num_votes: u32,
    #[sea_orm(column_name = "Popularity", column_type = "Decimal(Some((10, 6)))")]
    pub popularity: Decimal,
    #[sea_orm(column_name = "OutOfDateTS")]
    pub out_of_date_ts: Option<u64>,
    #[sea_orm(column_name = "FlaggerComment", column_type = "Text")]
    pub flagger_comment: String,
    #[sea_orm(column_name = "SubmittedTS")]
    pub submitted_ts: u64,
    #[sea_orm(column_name = "ModifiedTS")]
    pub modified_ts: u64,
    #[sea_orm(column_name = "RepologyCheck")]
    pub repology_check: u8,
    #[sea_orm(column_name = "NumGitPulls")]
    pub num_git_pulls: u64,
    #[sea_orm(column_name = "FlaggerUID")]
    pub flagger_uid: Option<u32>,
    #[sea_orm(column_name = "SubmitterUID")]
    pub submitter_uid: Option<u32>,
    #[sea_orm(column_name = "MaintainerUID")]
    pub maintainer_uid: Option<u32>,
    #[sea_orm(column_name = "PackagerUID")]
    pub packager_uid: Option<u32>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::users::Entity",
        from = "Column::FlaggerUid",
        to = "super::users::Column::Id",
        on_update = "Restrict",
        on_delete = "SetNull"
    )]
    Users4,
    #[sea_orm(
        belongs_to = "super::users::Entity",
        from = "Column::SubmitterUid",
        to = "super::users::Column::Id",
        on_update = "Restrict",
        on_delete = "SetNull"
    )]
    Users3,
    #[sea_orm(
        belongs_to = "super::users::Entity",
        from = "Column::MaintainerUid",
        to = "super::users::Column::Id",
        on_update = "Restrict",
        on_delete = "SetNull"
    )]
    Users2,
    #[sea_orm(
        belongs_to = "super::users::Entity",
        from = "Column::PackagerUid",
        to = "super::users::Column::Id",
        on_update = "Restrict",
        on_delete = "SetNull"
    )]
    Users1,
    #[sea_orm(has_many = "super::package_comaintainers::Entity")]
    PackageComaintainers,
    #[sea_orm(has_many = "super::package_comments::Entity")]
    PackageComments,
    #[sea_orm(has_many = "super::package_keywords::Entity")]
    PackageKeywords,
    #[sea_orm(has_many = "super::package_notifications::Entity")]
    PackageNotifications,
    #[sea_orm(has_many = "super::package_requests::Entity")]
    PackageRequests,
    #[sea_orm(has_many = "super::packages::Entity")]
    Packages,
    #[sea_orm(has_many = "super::package_votes::Entity")]
    PackageVotes,
}

impl Related<super::package_comaintainers::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PackageComaintainers.def()
    }
}

impl Related<super::package_comments::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PackageComments.def()
    }
}

impl Related<super::package_keywords::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PackageKeywords.def()
    }
}

impl Related<super::package_notifications::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PackageNotifications.def()
    }
}

impl Related<super::package_requests::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PackageRequests.def()
    }
}

impl Related<super::packages::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Packages.def()
    }
}

impl Related<super::package_votes::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PackageVotes.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
