//! `SeaORM` Entity. Generated by sea-orm-codegen 0.10.3

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "PackageComments")]
pub struct Model {
    #[sea_orm(column_name = "ID", primary_key)]
    pub id: u64,
    #[sea_orm(column_name = "PackageBaseID")]
    pub package_base_id: u32,
    #[sea_orm(column_name = "UsersID")]
    pub users_id: Option<u32>,
    #[sea_orm(column_name = "Comments", column_type = "Text")]
    pub comments: String,
    #[sea_orm(column_name = "RenderedComment", column_type = "Text")]
    pub rendered_comment: String,
    #[sea_orm(column_name = "CommentTS")]
    pub comment_ts: u64,
    #[sea_orm(column_name = "EditedTS")]
    pub edited_ts: Option<u64>,
    #[sea_orm(column_name = "EditedUsersID")]
    pub edited_users_id: Option<u32>,
    #[sea_orm(column_name = "DelTS")]
    pub del_ts: Option<u64>,
    #[sea_orm(column_name = "DelUsersID")]
    pub del_users_id: Option<u32>,
    #[sea_orm(column_name = "PinnedTS")]
    pub pinned_ts: u64,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::package_bases::Entity",
        from = "Column::PackageBaseId",
        to = "super::package_bases::Column::Id",
        on_update = "Restrict",
        on_delete = "Cascade"
    )]
    PackageBases,
    #[sea_orm(
        belongs_to = "super::users::Entity",
        from = "Column::UsersId",
        to = "super::users::Column::Id",
        on_update = "Restrict",
        on_delete = "SetNull"
    )]
    Users3,
    #[sea_orm(
        belongs_to = "super::users::Entity",
        from = "Column::EditedUsersId",
        to = "super::users::Column::Id",
        on_update = "Restrict",
        on_delete = "SetNull"
    )]
    Users2,
    #[sea_orm(
        belongs_to = "super::users::Entity",
        from = "Column::DelUsersId",
        to = "super::users::Column::Id",
        on_update = "Restrict",
        on_delete = "Cascade"
    )]
    Users1,
}

impl Related<super::package_bases::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PackageBases.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
