//! `SeaORM` Entity. Generated by sea-orm-codegen 0.10.3

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "Users")]
pub struct Model {
    #[sea_orm(column_name = "ID", primary_key)]
    pub id: u32,
    #[sea_orm(column_name = "AccountTypeID")]
    pub account_type_id: u8,
    #[sea_orm(column_name = "Suspended")]
    pub suspended: u8,
    #[sea_orm(column_name = "Username", unique)]
    pub username: String,
    #[sea_orm(column_name = "Email", unique)]
    pub email: String,
    #[sea_orm(column_name = "BackupEmail")]
    pub backup_email: Option<String>,
    #[sea_orm(column_name = "HideEmail")]
    pub hide_email: u8,
    #[sea_orm(column_name = "Passwd")]
    pub passwd: String,
    #[sea_orm(column_name = "Salt")]
    pub salt: String,
    #[sea_orm(column_name = "ResetKey")]
    pub reset_key: String,
    #[sea_orm(column_name = "RealName")]
    pub real_name: String,
    #[sea_orm(column_name = "LangPreference")]
    pub lang_preference: String,
    #[sea_orm(column_name = "Timezone")]
    pub timezone: String,
    #[sea_orm(column_name = "Homepage", column_type = "Text", nullable)]
    pub homepage: Option<String>,
    #[sea_orm(column_name = "IRCNick")]
    pub irc_nick: String,
    #[sea_orm(column_name = "PGPKey")]
    pub pgp_key: Option<String>,
    #[sea_orm(column_name = "LastLogin")]
    pub last_login: u64,
    #[sea_orm(column_name = "LastLoginIPAddress")]
    pub last_login_ip_address: Option<String>,
    #[sea_orm(column_name = "LastSSHLogin")]
    pub last_ssh_login: u64,
    #[sea_orm(column_name = "LastSSHLoginIPAddress")]
    pub last_ssh_login_ip_address: Option<String>,
    #[sea_orm(column_name = "InactivityTS")]
    pub inactivity_ts: u64,
    #[sea_orm(column_name = "RegistrationTS")]
    pub registration_ts: DateTimeUtc,
    #[sea_orm(column_name = "CommentNotify")]
    pub comment_notify: i8,
    #[sea_orm(column_name = "UpdateNotify")]
    pub update_notify: i8,
    #[sea_orm(column_name = "OwnershipNotify")]
    pub ownership_notify: i8,
    #[sea_orm(column_name = "SSOAccountID", unique)]
    pub sso_account_id: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::account_types::Entity",
        from = "Column::AccountTypeId",
        to = "super::account_types::Column::Id",
        on_update = "Restrict",
        on_delete = "NoAction"
    )]
    AccountTypes,
    #[sea_orm(has_many = "super::accepted_terms::Entity")]
    AcceptedTerms,
    #[sea_orm(has_many = "super::api_keys::Entity")]
    ApiKeys,
    #[sea_orm(has_many = "super::package_comaintainers::Entity")]
    PackageComaintainers,
    #[sea_orm(has_many = "super::package_notifications::Entity")]
    PackageNotifications,
    #[sea_orm(has_many = "super::package_votes::Entity")]
    PackageVotes,
    #[sea_orm(has_many = "super::sessions::Entity")]
    Sessions,
    #[sea_orm(has_many = "super::ssh_pub_keys::Entity")]
    SshPubKeys,
    #[sea_orm(has_many = "super::tu_vote_info::Entity")]
    TuVoteInfo,
    #[sea_orm(has_many = "super::tu_votes::Entity")]
    TuVotes,
}

impl Related<super::account_types::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AccountTypes.def()
    }
}

impl Related<super::accepted_terms::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AcceptedTerms.def()
    }
}

impl Related<super::api_keys::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ApiKeys.def()
    }
}

impl Related<super::package_comaintainers::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PackageComaintainers.def()
    }
}

impl Related<super::package_notifications::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PackageNotifications.def()
    }
}

impl Related<super::package_votes::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PackageVotes.def()
    }
}

impl Related<super::sessions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Sessions.def()
    }
}

impl Related<super::ssh_pub_keys::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SshPubKeys.def()
    }
}

impl Related<super::tu_vote_info::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TuVoteInfo.def()
    }
}

impl Related<super::tu_votes::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TuVotes.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
